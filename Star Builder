#SETUP 
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import math

#Initializing the variables 
start = 0
end = 1
rad_star = np.arange(start,end,0.01) #radius

                                                          ####BUILDING A CONSTANT-DENSITY STAR####
#Expressing the star's mass in terms of its radius 
mass = (rad_star**3)
print(mass)

#Gravity 
grav = mass*(rad_star**(-2))
print(grav)

#Plotting the stellar characteristics of a constant density star 
plt.plot(rad_star,mass,'b-',label='Mass (kg)')
plt.plot(rad_star,grav,'r-', label='Gravity(m/s^2)')
plt.title("Stellar Characteristics of a Constant Density Star")

# Showing constant density
plt.axhline(y=1,xmax=1.00,c='k',label='Constant Density')

plt.ylabel('Normalized Gravity and Mass')
plt.xlabel('Radius (m) ($r/R_{*}$)')

plt.legend(loc='best')
plt.savefig('constant-density')
plt.show()
                                                          ####BUILDING A DECREASING-DENSITY STAR####
#Initializing the variables
start_dec = 0
end_dec =1
rad_star_dec = np.arange(start,end,0.01)


#using the appropriate physics formulas for this situation:

#mass
mass_dec = 4*(rad_star)**3-3*(rad_star)**4
print(mass_dec)

#gravity
grav_dec =(4*rad_star_dec)-3*(rad_star_dec)**2
print(grav_dec)

#normalized density
rho_dec = 1-rad_star

#normalized pressure
press_dec = -24/5*((rad_star_dec)**2)+(28/5)*(rad_star_dec)**3-(9/5)*(rad_star_dec)**4 + 1

#potential energy 
Epot_dec = (168/13)*((rad_star_dec)**5)-(245/13)*((rad_star_dec)**6)+(90/13)*((rad_star_dec)**7)
print(Epot_dec)

#plotting 
fig = plt.figure()
axes = fig.add_subplot(111)
axes.plot(rad_star_dec,rho_dec,'salmon',label='Density')
axes.plot(rad_star_dec,mass_dec,'olive',label='Mass')
axes.plot(rad_star_dec,grav_dec,'indigo',label='Gravity')
axes.plot(rad_star_dec,press_dec,'seagreen',label='Pressure')
axes.plot(rad_star_dec,Epot_dec,'orange',label='Energy')
axes.set_title("Normalized Density, Mass, Gravity, and Pressure vs. the Normalized Radius")
axes.set_xlabel('Radius(m)')
axes.set_ylabel('Normalized Variables')
axes.legend(loc='best')
plt.show()
print(press_dec)

                                           





